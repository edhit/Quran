const axios = require("axios");
const fs = require("fs");
const schedule = require("node-schedule");
const NodeID3 = require("node-id3");
require("dotenv").config();
const { Telegraf } = require("telegraf");
const { createLogger, format, transports } = require("winston");
const db = require('./database')

const API_URL = "https://api.alquran.cloud/v1/page/";
const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

const intervals = {
  sabak: [1, 3, 7],
  sabki: [14, 30],
  manzil: [90, 180]
};

const logger = createLogger({
  level: "info",
  format: format.combine(
    format.timestamp(),
    format.json()
  ),
  transports: [
    new transports.Console(),
    new transports.File({ filename: "bot.log" })
  ]
});

function isValidPageNumber(pageNumber) {
  return !isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= 604;
}

function getAudioUrl(ayah, reciter) {
  const reciters = {
    husary: "ar.husary",
    alafasy: "ar.alafasy",
    abdulsamad: "ar.abdulsamad",
  };

  const reciterCode = reciters[reciter] || reciters.husary; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –•—É—Å–∞—Ä–∏
  return `https://api.alquran.cloud/v1/ayah/${ayah.surah}:${ayah.ayah}/${reciterCode}`;
}

function formatAyahId(surah, ayah) {
  // –ù–æ–º–µ—Ä —Å—É—Ä—ã –∏ –∞—è—Ç–∞ –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –¥–æ 3 —Å–∏–º–≤–æ–ª–æ–≤
  const surahPart = String(surah).padStart(3, "0");
  const ayahPart = String(ayah).padStart(3, "0");

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π ID: "1" + —Å—É—Ä–∞ + –∞—è—Ç
  return `1${surahPart}${ayahPart}`;
}

async function fetchAyahsByPage(pageNumber, startAyah, endAyah) {
  // –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—è—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ ayah_texts
  const cachedAyahs = await getAyahsFromDatabase(pageNumber, startAyah, endAyah);
  if (cachedAyahs.length > 0) {
    return cachedAyahs;
  }

  logger.info(`–ê—è—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...`);
  // –ï—Å–ª–∏ –∞—è—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
  try {
    const response = await axios.get(`${API_URL}${pageNumber}/quran-uthmani`);
    if (!response.data || !response.data.data || !response.data.data.ayahs) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API");
    }

    let filteredAyahs;
    if (startAyah && endAyah) {
      filteredAyahs = response.data.data.ayahs.filter(
        ayah => ayah.numberInSurah >= startAyah && ayah.numberInSurah <= endAyah
      );
    } else {
      filteredAyahs = response.data.data.ayahs;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—è—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await saveAyahsToDatabase(filteredAyahs);

    return filteredAyahs.map(ayah => ({
      number: ayah.number,
      text: ayah.text,
      surah: ayah.surah.number,
      ayah: ayah.numberInSurah,
      page: pageNumber,
      nextReview: new Date(),
      reviewStage: "sabak",
      reviewStep: 0
    }));
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}:`, error.message);
    return [];
  }
}

async function addPageForMemorization(userId, pageNumber) {
  const newAyahs = await fetchAyahsByPage(pageNumber);
  if (newAyahs.length === 0) {
    logger.warn(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    return;
  }

  const stmt = db.prepare(`
    INSERT INTO ayahs (user_id, number, text, surah, ayah, page, next_review, review_stage, review_step)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
  `);

  newAyahs.forEach(ayah => {
    stmt.run(
      userId,
      ayah.number,
      '', // ayah.text,
      ayah.surah,
      ayah.ayah,
      ayah.page,
      ayah.nextReview.toISOString(),
      ayah.reviewStage,
      ayah.reviewStep
    );
  });

  stmt.finalize();
  logger.info(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`);
}

async function getUserByChatId(chatId) {
  return new Promise((resolve, reject) => {
    db.get("SELECT * FROM users WHERE chat_id = ?", [chatId], (err, row) => {
      if (err) {
        reject(err);
      } else {
        resolve(row);
      }
    });
  });
}

async function getAyahsForReview(userId) {
  return new Promise((resolve, reject) => {
    const today = new Date().toISOString();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—è—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ayahs –∏ —Ç–µ–∫—Å—Ç –∞—è—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ayah_texts
    db.all(`
      SELECT 
        ayahs.id AS ayah_id,
        ayahs.user_id,
        ayahs.page,
        ayahs.next_review,
        ayahs.review_stage,
        ayahs.review_step,
        ayah_texts.surah,
        ayah_texts.ayah,
        ayah_texts.text -- –¢–µ–∫—Å—Ç –∞—è—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ayah_texts
      FROM ayahs
      INNER JOIN ayah_texts 
        ON ayahs.page = ayah_texts.page 
        AND ayahs.ayah = ayah_texts.ayah -- –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É –∞—è—Ç–∞
      WHERE ayahs.user_id = ? AND ayahs.next_review <= ?
    `, [userId, today], (err, rows) => {
      if (err) {
        reject(err);
      } else {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const ayahs = rows.map(row => ({
          id: row.ayah_id, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞—è—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ayahs
          user_id: row.user_id,
          page: row.page,
          surah: row.surah,
          ayah: row.ayah,
          text: row.text, // –¢–µ–∫—Å—Ç –∞—è—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ayah_texts
          nextReview: new Date(row.next_review),
          reviewStage: row.review_stage,
          reviewStep: row.review_step
        }));
        resolve(ayahs);
      }
    });
  });
}

async function updateReviewSchedule(userId) {
  return new Promise((resolve, reject) => {
    const today = new Date().toISOString();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—è—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    db.all(`
      SELECT * FROM ayahs
      WHERE user_id = ? AND next_review <= ?
    `, [userId, today], (err, ayahs) => {
      if (err) {
        reject(err);
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞—è—Ç
      const stmt = db.prepare(`
        UPDATE ayahs
        SET next_review = ?, review_stage = ?, review_step = ?
        WHERE id = ?
      `);

      ayahs.forEach(ayah => {
        let reviewSteps = intervals[ayah.review_stage];
        let newReviewStage = ayah.review_stage;
        let newReviewStep = ayah.review_step;

        if (newReviewStep >= reviewSteps.length - 1) {
          if (newReviewStage === "sabak") newReviewStage = "sabki";
          else if (newReviewStage === "sabki") newReviewStage = "manzil";
          newReviewStep = 0;
        } else {
          newReviewStep++;
        }

        const nextReviewDate = new Date();
        nextReviewDate.setDate(nextReviewDate.getDate() + intervals[newReviewStage][newReviewStep]);

        stmt.run(
          nextReviewDate.toISOString(),
          newReviewStage,
          newReviewStep,
          ayah.id
        );
      });

      stmt.finalize();
      resolve();
    });
  });
}

async function sendReviewAyahs(userId, chatId, reciter = null, notification = false) {
  const ayahs = await getAyahsForReview(userId);
  if (ayahs.length === 0) {
    logger.info("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.");
    await bot.telegram.sendMessage(chatId, "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.");
    return;
  }

  if (notification) {
    logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. /review");
    await bot.telegram.sendMessage(chatId, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è. /review");
    return;
  }

  for (const ayah of ayahs) {
    try {
      const messageText = `üìñ *${ayah.surah}:${ayah.ayah}* (—Å—Ç—Ä. ${ayah.page})\n${ayah.text}`;
      // –ï—Å–ª–∏ —á—Ç–µ—Ü –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
      if (!reciter) {
        await bot.telegram.sendMessage(chatId, messageText, { parse_mode: "Markdown" });
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º file_id –∞—É–¥–∏–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      let fileId = await getAudioFileId(ayah.surah, ayah.ayah, reciter);

      // –ï—Å–ª–∏ file_id –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ file_id
      let messageId = false;
      if (!fileId) {
        let audio = await uploadAndSaveAudio(ayah, chatId, reciter);
        fileId = audio.fileId
        messageId = audio.messageId
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∏ —Ç–µ–∫—Å—Ç
      await sendAudioWithCaption(chatId, fileId, messageText, messageId);

    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—è—Ç–∞ ${ayah.surah}:${ayah.ayah}:`, error);
      await bot.telegram.sendMessage(chatId, `üìñ ${ayah.surah}:${ayah.ayah} (—Å—Ç—Ä. ${ayah.page})\n${ayah.text}`);
    }
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
 */
async function uploadAndSaveAudio(ayah, chatId, reciter) {
  const audioUrl = getAudioUrl(ayah, reciter);
  const response = await axios.get(audioUrl);
  const audioLink = response.data.data.audio;

  const filePath = `ayah_${ayah.surah}_${ayah.ayah}.mp3`;
  const writer = fs.createWriteStream(filePath);
  const audioResponse = await axios.get(audioLink, { responseType: "stream" });
  audioResponse.data.pipe(writer);

  await new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∞—É–¥–∏–æ
  const tags = {
    title: `–°—É—Ä–∞ ${ayah.surah}, –ê—è—Ç ${ayah.ayah}`,
    artist: `–®–µ–π—Ö ${reciter.charAt(0).toUpperCase() + reciter.slice(1)}`,
    album: "Holy Quran",
    comment: { text: "–ò–∑ AlQuran Cloud API" },
  };
  NodeID3.write(tags, filePath);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const audioMessage = await bot.telegram.sendAudio(chatId, { source: filePath });
  const fileId = audioMessage.audio.file_id;

  // –§–æ—Ä–º–∏—Ä—É–µ–º ayah_id –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  const ayahId = formatAyahId(ayah.surah, ayah.ayah);
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  db.run(`
    INSERT INTO audio_files (ayah_id, reciter, file_id)
    VALUES (?, ?, ?)
  `, [ayahId, reciter, fileId]);

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  fs.unlinkSync(filePath);

  return {
    fileId: fileId, 
    messageId: audioMessage.message_id
  };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è.
 */
async function sendAudioWithCaption(chatId, fileId, messageText, messageId) {
  if (messageId) {
    await bot.telegram.sendMessage(chatId, messageText, {
      reply_to_message_id: messageId,
      parse_mode: "Markdown",
    });

    return;
  }

  const maxCaptionLength = 1024;

  if (messageText.length <= maxCaptionLength) {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    await bot.telegram.sendAudio(chatId, fileId, {
      caption: messageText,
      parse_mode: "Markdown",
    });
  } else {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏, –∞ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const audioMessage = await bot.telegram.sendAudio(chatId, fileId);
    await bot.telegram.sendMessage(chatId, messageText, {
      reply_to_message_id: audioMessage.message_id,
      parse_mode: "Markdown",
    });
  }
}

async function createUser(chatId) {
  return new Promise((resolve, reject) => {
    db.run("INSERT INTO users (chat_id) VALUES (?)", [chatId], function (err) {
      if (err) {
        reject(err);
      } else {
        resolve(this.lastID); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
    });
  });
}

async function getAudioFileId(surah, ayah, reciter) {
  const ayahId = formatAyahId(surah, ayah);
  return new Promise((resolve, reject) => {
    db.get(`
      SELECT file_id FROM audio_files
      WHERE ayah_id = ? AND reciter = ?
    `, [ayahId, reciter], (err, row) => {
      if (err) {
        reject(err);
      } else {
        resolve(row ? row.file_id : null);
      }
    });
  });
}

async function getAyahsByUser(userId) {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM ayahs WHERE user_id = ?", [userId], (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

async function removePageForUser(userId, pageNumber) {
  return new Promise((resolve, reject) => {
    db.run("DELETE FROM ayahs WHERE user_id = ? AND page = ?", [userId, pageNumber], function (err) {
      if (err) {
        reject(err);
      } else {
        resolve(this.changes); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      }
    });
  });
}

async function getProgressForUser(userId) {
  return new Promise((resolve, reject) => {
    db.all(`
      SELECT page, review_stage, COUNT(*) as count
      FROM ayahs
      WHERE user_id = ?
      GROUP BY page, review_stage
    `, [userId], (err, rows) => {
      if (err) {
        reject(err);
      } else {
        const progress = {};
        rows.forEach(row => {
          if (!progress[row.page]) {
            progress[row.page] = { total: 0, sabak: 0, sabki: 0, manzil: 0 };
          }
          progress[row.page].total += row.count;
          progress[row.page][row.review_stage] += row.count;
        });
        resolve(progress);
      }
    });
  });
}

async function getAllUsers() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM users", (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

async function getAyahsFromDatabase(pageNumber, startAyah, endAyah) {
  return new Promise((resolve, reject) => {
    let query = `
      SELECT * FROM ayah_texts
      WHERE page = ?
    `;
    const params = [pageNumber];

    if (startAyah && endAyah) {
      query += ` AND ayah BETWEEN ? AND ?`;
      params.push(startAyah, endAyah);
    }

    db.all(query, params, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows.map(row => ({
          number: row.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
          text: row.text,
          surah: row.surah,
          ayah: row.ayah,
          page: row.page,
          nextReview: new Date(),
          reviewStage: "sabak",
          reviewStep: 0
        })));
      }
    });
  });
}

async function saveAyahsToDatabase(ayahs) {
  const stmt = db.prepare(`
    INSERT INTO ayah_texts (surah, ayah, text, page)
    VALUES (?, ?, ?, ?)
  `);

  ayahs.forEach(ayah => {
    stmt.run(
      ayah.surah.number,
      ayah.numberInSurah,
      ayah.text,
      ayah.page
    );
  });

  stmt.finalize();
}

// –ö–æ–º–∞–Ω–¥–∞ /review
bot.command("review", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const user = await getUserByChatId(chatId);
  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  const args = ctx.message.text.split(" ");
  const reciter = args[1] || null;

  await sendReviewAyahs(user.id, chatId, reciter);
});

// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 6 —É—Ç—Ä–∞
schedule.scheduleJob("0 3 * * *", async () => {
  logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—è—Ç–æ–≤...");

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await getAllUsers();
  for (const user of users) {
    try {
      await updateReviewSchedule(user.id);
      await sendReviewAyahs(user.id, user.chat_id, null, true);
    } catch (error) {
      logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chat_id}:`, error);
    }
  }
});

bot.command("addpage", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const user = await getUserByChatId(chatId);
  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  const args = ctx.message.text.split(" ");
  if (args.length < 2) {
    return ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /addpage <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>");
  }

  const pageNumber = parseInt(args[1]);
  if (!isValidPageNumber(pageNumber)) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç 1 –¥–æ 604.");
  }

  try {
    await addPageForMemorization(user.id, pageNumber);
    ctx.reply(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω –∑–∞—É—á–∏–≤–∞–Ω–∏—è!`);
  } catch (error) {
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error);
  }
});

bot.command("list", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const user = await getUserByChatId(chatId);
  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  const data = await getAyahsByUser(user.id);
  if (data.length === 0) {
    return ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
  }

  const pages = [...new Set(data.map(ayah => ayah.page))].sort((a, b) => a - b);
  ctx.reply(`üìö –°—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—É—á–∏–≤–∞–Ω–∏—è: ${pages.join(", ")}`);
});

bot.command("remove", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const user = await getUserByChatId(chatId);
  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  const args = ctx.message.text.split(" ");
  if (args.length < 2) {
    return ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /remove <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>");
  }

  const pageNumber = parseInt(args[1]);
  if (!isValidPageNumber(pageNumber)) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç 1 –¥–æ 604.");
  }

  try {
    await removePageForUser(user.id, pageNumber);
    ctx.reply(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.`);
  } catch (error) {
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error);
  }
});

bot.command("progress", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const user = await getUserByChatId(chatId);
  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  const progress = await getProgressForUser(user.id);
  if (Object.keys(progress).length === 0) {
    return ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
  }

  let message = "üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—É—á–∏–≤–∞–Ω–∏—è:</b>\n";
  Object.keys(progress).sort((a, b) => a - b).forEach(page => {
    message += `\nüìñ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}:</b>\n`;
    message += `- –í—Å–µ–≥–æ –∞—è—Ç–æ–≤: ${progress[page].total}\n`;
    message += `- –°–∞–±–∞–∫: ${progress[page].sabak}\n`;
    message += `- –°–∞–±–∫–∏: ${progress[page].sabki}\n`;
    message += `- –ú–∞–Ω–∑–∏–ª—å: ${progress[page].manzil}\n`;
  });

  ctx.replyWithHTML(message);
});

bot.command("update", async (ctx) => {
  const chatId = ctx.message.chat.id;
  const user = await getUserByChatId(chatId);
  if (!user) {
    return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
  }

  try {
    await updateReviewSchedule(user.id);
    ctx.reply("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
  } catch (error) {
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
  }
});

bot.command("reciters", async (ctx) => {
  const message = `
üéô <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —á—Ç–µ—Ü—ã:</b>
- <b>husary</b>: –®–µ–π—Ö –ú–∞—Ö–º—É–¥ –•–∞–ª–∏–ª—å –∞–ª—å-–•—É—Å–∞—Ä–∏
- <b>alafasy</b>: –®–µ–π—Ö –ú–∏—à–∞—Ä–∏ –†–∞—à–∏–¥ –∞–ª—å-–ê—Ñ–∞—Å–∏
- <b>abdulsamad</b>: –®–µ–π—Ö –ê–±–¥—É—Ä-–†–∞—Ö–º–∞–Ω –∞—Å-–°—É–¥–∞–∏—Å
  `;

  ctx.replyWithHTML(message);
});

bot.command("start", async (ctx) => {
  const chatId = ctx.message.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const user = await getUserByChatId(chatId);
  if (!user) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    await createUser(chatId);
    logger.info(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${chatId}`);
  }

  const welcomeMessage = `
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è –ö–æ—Ä–∞–Ω–∞!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞—É—á–∏–≤–∞–Ω–∏—è –ö–æ—Ä–∞–Ω–∞ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ <i>"–°–∞–±–∞“õ-–°–∞–±“õ–∏-–ú–∞–Ω–∑–∏–ª—å"</i>.

üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- <code>/addpage &lt;–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã&gt;</code> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
- <code>/review</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∞—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
- <code>/list</code> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
- <code>/remove &lt;–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã&gt;</code> ‚Äî –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
- <code>/update</code> ‚Äî –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é.
- <code>/progress</code> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
- <code>/reciters</code> ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á—Ç–µ—Ü–æ–≤.
- <code>/help</code> ‚Äî –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.

üìÖ <b>–ê—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞.</b>

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
- –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1: <code>/addpage 1</code>
- –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1: <code>/remove 1</code>
- –ü–æ–ª—É—á–∏—Ç—å –∞—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: <code>/review</code>

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/help</code>.
`;

  await ctx.replyWithHTML(welcomeMessage);
});

bot.command("help", async (ctx) => {
  const helpMessage = `
üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>1. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- <code>/addpage &lt;–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã&gt;</code> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/addpage 1</code>).
- <code>/review</code> ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∞—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
- <code>/list</code> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
- <code>/remove &lt;–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã&gt;</code> ‚Äî –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/remove 1</code>).
- <code>/update</code> ‚Äî –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é.
- <code>/progress</code> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
- <code>/reciters</code> ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á—Ç–µ—Ü–æ–≤.
- <code>/help</code> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.

<b>2. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è:</b>
–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥–∏–∫—É <i>"–°–∞–±–∞“õ-–°–∞–±“õ–∏-–ú–∞–Ω–∑–∏–ª—å"</i>:
- <b>–°–∞–±–∞“õ</b>: –ù–æ–≤—ã–µ –∞—è—Ç—ã –∑–∞—É—á–∏–≤–∞—é—Ç—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: 1, 3 –∏ 7 –¥–Ω–µ–π.
- <b>–°–∞–±“õ–∏</b>: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ "–°–∞–±–∞“õ" –∞—è—Ç—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏: 14 –∏ 30 –¥–Ω–µ–π.
- <b>–ú–∞–Ω–∑–∏–ª—å</b>: –ù–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –∞—è—Ç—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 90 –∏ 180 –¥–Ω–µ–π.

<b>3. –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>
- –ê—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ <b>6:00 —É—Ç—Ä–∞</b>.
- –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∞—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <code>/review</code>.

<b>4. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
- –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1: <code>/addpage 1</code>
- –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1: <code>/remove 1</code>
- –ü–æ–ª—É—á–∏—Ç—å –∞—è—Ç—ã: <code>/review</code>

<b>5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- <code>/progress</code> ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—É—á–∏–≤–∞–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
- <code>/reciters</code> ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á—Ç–µ—Ü–æ–≤ –∏ –∏—Ö —Å—Ç–∏–ª–µ–π.

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ <code>/start</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
`;

  try {
    await ctx.replyWithHTML(helpMessage);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

bot.launch();
logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.");