const axios = require("axios");
const fs = require("fs");
const schedule = require("node-schedule");
require("dotenv").config();
const { Telegraf } = require("telegraf");

const DATA_FILE = "quran_data.json";
const API_URL = "https://api.alquran.cloud/v1/page/";
const BOT_TOKEN = process.env.BOT_TOKEN;
const USER_CHAT_ID = process.env.USER_CHAT_ID;
const bot = new Telegraf(BOT_TOKEN);

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–°–∞–±–∞–∫ ‚Üí –°–∞–±–∫–∏ ‚Üí –ú–∞–Ω–∑–∏–ª—å)
const intervals = {
  sabak: [1, 3, 7],     // 1, 3, 7 –¥–Ω–µ–π ‚Äî –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
  sabki: [14, 30],      // 2 –Ω–µ–¥–µ–ª–∏, 1 –º–µ—Å—è—Ü ‚Äî —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
  manzil: [90, 180]     // 3 –º–µ—Å—è—Ü–∞, 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—è—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function fetchAyahsByPage(pageNumber) {
  try {
    const response = await axios.get(`${API_URL}${pageNumber}/quran-uthmani`);
    return response.data.data.ayahs.map(ayah => ({
      number: ayah.number,
      text: ayah.text,
      surah: ayah.surah.number,
      ayah: ayah.numberInSurah,
      page: pageNumber,
      nextReview: new Date(),
      reviewStage: "sabak", // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–≤–æ–≥–æ –∑–∞—É—á–∏–≤–∞–Ω–∏—è
      reviewStep: 0 // –ò–Ω–¥–µ–∫—Å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function loadData() {
  if (!fs.existsSync(DATA_FILE)) return [];
  return JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function saveData(data) {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è
async function addPageForMemorization(pageNumber) {
  let data = loadData();
  const newAyahs = await fetchAyahsByPage(pageNumber);
  data = [...data, ...newAyahs];
  saveData(data);
  console.log(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
function getAyahsForReview() {
  const today = new Date();
  return loadData().filter(ayah => new Date(ayah.nextReview) <= today);
}

async function addPageForMemorization(pageNumber) {
  let data = loadData();
  const newAyahs = await fetchAyahsByPage(pageNumber);
  
  if (newAyahs.length === 0) {
    console.log(`‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    return;
  }

  data = [...data, ...newAyahs];
  saveData(data);
  console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
function updateReviewSchedule() {
  let data = loadData();
  const today = new Date();

  data.forEach(ayah => {
    if (new Date(ayah.nextReview) <= today) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      let reviewSteps = intervals[ayah.reviewStage];
      if (ayah.reviewStep >= reviewSteps.length - 1) {
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —à–∞–≥–∏ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        if (ayah.reviewStage === "sabak") ayah.reviewStage = "sabki";
        else if (ayah.reviewStage === "sabki") ayah.reviewStage = "manzil";
        ayah.reviewStep = 0;
      } else {
        ayah.reviewStep++;
      }
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
      ayah.nextReview = new Date();
      ayah.nextReview.setDate(today.getDate() + intervals[ayah.reviewStage][ayah.reviewStep]);
    }
  });

  saveData(data);
}

// Telegram-–±–æ—Ç: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
bot.command("review", async (ctx) => {
  const ayahs = getAyahsForReview();
  if (ayahs.length === 0) {
    ctx.reply("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.");
    return;
  }

  for (const ayah of ayahs) {
    await ctx.reply(`üìñ ${ayah.surah}:${ayah.ayah} (—Å—Ç—Ä. ${ayah.page})\n${ayah.text}`);
  }
});

bot.command("addpage", async (ctx) => {
  const args = ctx.message.text.split(" ");
  if (args.length < 2) {
    return ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /addpage <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>");
  }

  const pageNumber = parseInt(args[1]);
  if (isNaN(pageNumber) || pageNumber < 1 || pageNumber > 604) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç 1 –¥–æ 604.");
  }

  await addPageForMemorization(pageNumber);
  ctx.reply(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω –∑–∞—É—á–∏–≤–∞–Ω–∏—è!`);
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
schedule.scheduleJob("0 6 * * *", () => { // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞
  console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è...");
  updateReviewSchedule();
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
//(async () => {
//  const page = 1; // –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//  await addPageForMemorization(page);
//  console.log("–ê—è—Ç—ã –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:", getAyahsForReview());
//  bot.launch();
//})();

bot.launch()