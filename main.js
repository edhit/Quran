const axios = require("axios");
const fs = require("fs");
const schedule = require("node-schedule");
require("dotenv").config();
const { Telegraf } = require("telegraf");
const { createLogger, format, transports } = require("winston");

const DATA_FILE = "quran_data.json";
const API_URL = "https://api.alquran.cloud/v1/page/";
const BOT_TOKEN = process.env.BOT_TOKEN;
const USER_CHAT_ID = process.env.USER_CHAT_ID;
const bot = new Telegraf(BOT_TOKEN);

const intervals = {
  sabak: [1, 3, 7],
  sabki: [14, 30],
  manzil: [90, 180]
};

const logger = createLogger({
  level: "info",
  format: format.combine(
    format.timestamp(),
    format.json()
  ),
  transports: [
    new transports.Console(),
    new transports.File({ filename: "bot.log" })
  ]
});

function isValidPageNumber(pageNumber) {
  return !isNaN(pageNumber) && pageNumber >= 1 && pageNumber <= 604;
}

function isAuthorizedUser(chatId) {
  return chatId == USER_CHAT_ID;
}

async function fetchAyahsByPage(pageNumber) {
  try {
    const response = await axios.get(`${API_URL}${pageNumber}/quran-uthmani`);
    if (!response.data || !response.data.data || !response.data.data.ayahs) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API");
    }
    return response.data.data.ayahs.map(ayah => ({
      number: ayah.number,
      text: ayah.text,
      surah: ayah.surah.number,
      ayah: ayah.numberInSurah,
      page: pageNumber,
      nextReview: new Date(),
      reviewStage: "sabak",
      reviewStep: 0
    }));
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}:`, error.message);
    return [];
  }
}

function loadData() {
  if (!fs.existsSync(DATA_FILE)) {
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  }
  return JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
}

function backupData() {
  if (!fs.existsSync(DATA_FILE)) {
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
    fs.writeFileSync(DATA_FILE, JSON.stringify([]));
    logger.info(`–§–∞–π–ª ${DATA_FILE} —Å–æ–∑–¥–∞–Ω.`);
    return;
  }

  // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  const backupFile = `quran_data_backup_${new Date().toISOString()}.json`;
  fs.copyFileSync(DATA_FILE, backupFile);
  logger.info(`–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupFile}`);
}

function saveData(data) {
  backupData(); // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–∏–ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

async function addPageForMemorization(pageNumber) {
  let data = loadData();
  const newAyahs = await fetchAyahsByPage(pageNumber);
  
  if (newAyahs.length === 0) {
    logger.warn(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    return;
  }

  data = [...data, ...newAyahs];
  saveData(data);
  logger.info(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
}

function getAyahsForReview() {
  const today = new Date();
  return loadData().filter(ayah => new Date(ayah.nextReview) <= today);
}

function updateReviewSchedule() {
  let data = loadData();
  const today = new Date();

  data.forEach(ayah => {
    if (new Date(ayah.nextReview) <= today) {
      let reviewSteps = intervals[ayah.reviewStage];
      if (ayah.reviewStep >= reviewSteps.length - 1) {
        if (ayah.reviewStage === "sabak") ayah.reviewStage = "sabki";
        else if (ayah.reviewStage === "sabki") ayah.reviewStage = "manzil";
        ayah.reviewStep = 0;
      } else {
        ayah.reviewStep++;
      }
      ayah.nextReview = new Date();
      ayah.nextReview.setDate(today.getDate() + intervals[ayah.reviewStage][ayah.reviewStep]);
    }
  });

  saveData(data);
}

bot.command("review", async (ctx) => {
  if (!isAuthorizedUser(ctx.message.chat.id)) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
  }

  const ayahs = getAyahsForReview();
  if (ayahs.length === 0) {
    ctx.reply("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞—è—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.");
    return;
  }

  for (const ayah of ayahs) {
    await ctx.reply(`üìñ ${ayah.surah}:${ayah.ayah} (—Å—Ç—Ä. ${ayah.page})\n${ayah.text}`);
  }
});

bot.command("addpage", async (ctx) => {
  if (!isAuthorizedUser(ctx.message.chat.id)) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
  }

  const args = ctx.message.text.split(" ");
  if (args.length < 2) {
    return ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /addpage <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>");
  }

  const pageNumber = parseInt(args[1]);
  if (!isValidPageNumber(pageNumber)) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç 1 –¥–æ 604.");
  }

  try {
    await addPageForMemorization(pageNumber);
    ctx.reply(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω –∑–∞—É—á–∏–≤–∞–Ω–∏—è!`);
  } catch (error) {
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error);
  }
});

bot.command("list", async (ctx) => {
  if (!isAuthorizedUser(ctx.message.chat.id)) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
  }

  const data = loadData();
  if (data.length === 0) {
    return ctx.reply("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
  }

  const pages = [...new Set(data.map(ayah => ayah.page))].sort((a, b) => a - b);
  ctx.reply(`üìö –°—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—É—á–∏–≤–∞–Ω–∏—è: ${pages.join(", ")}`);
});

bot.command("remove", async (ctx) => {
  if (!isAuthorizedUser(ctx.message.chat.id)) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
  }

  const args = ctx.message.text.split(" ");
  if (args.length < 2) {
    return ctx.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /remove <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>");
  }

  const pageNumber = parseInt(args[1]);
  if (!isValidPageNumber(pageNumber)) {
    return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç 1 –¥–æ 604.");
  }

  let data = loadData();
  const initialLength = data.length;
  data = data.filter(ayah => ayah.page !== pageNumber);

  if (data.length === initialLength) {
    return ctx.reply(`‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.`);
  }

  saveData(data);
  ctx.reply(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.`);
});

bot.command("update", async (ctx) => {
  if (!isAuthorizedUser(ctx.message.chat.id)) {
    return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.");
  }

  try {
    updateReviewSchedule();
    ctx.reply("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ.");
  } catch (error) {
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.");
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
  }
});

bot.command("help", (ctx) => {
    const helpMessage = `
  üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*
  
  /addpage <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞—É—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /addpage 1).
  /review ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∞—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
  /list ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞—É—á–∏–≤–∞–Ω–∏—è.
  /remove <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã> ‚Äî –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—É—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /remove 1).
  /update ‚Äî –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é.
  /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
  
  *–ü—Ä–∏–º–µ—Ä—ã:*
  - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1: /addpage 1
  - –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1: /remove 1
  - –ü–æ–ª—É—á–∏—Ç—å –∞—è—Ç—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: /review
  `;
  
    ctx.replyWithMarkdown(helpMessage);
  });

schedule.scheduleJob("0 6 * * *", () => {
  logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è...");
  updateReviewSchedule();
});

bot.launch();
logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
